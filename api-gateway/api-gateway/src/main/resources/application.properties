
# App & Puerto
spring.application.name=api-gateway
server.port=8080


# Eureka (descubrimiento de servicios)
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true


# Seguridad: validar JWT de Keycloak
# (Spring Security Resource Server)
# Issuer de tu realm: microerp
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8082/realms/microerp

# (Opcional) reloj tolerante a pequeños desfasajes de tiempo
spring.security.oauth2.resourceserver.jwt.jwk-set-cache-duration=15m


# Spring Cloud Gateway
# Remover Cookie hacia los servicios internos
spring.cloud.gateway.default-filters[0]=RemoveRequestHeader=Cookie

# Ruta: /users/** -> lb://user-service (descubierto en Eureka)
spring.cloud.gateway.routes[0].id=user-service
spring.cloud.gateway.routes[0].uri=lb://user-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/**
spring.cloud.gateway.routes[0].filters[0]=TokenRelay

# ========================
# Actuator (diagnóstico)
# ========================

# Qué endpoints expone Actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Habilitar el endpoint de Prometheus
management.endpoint.prometheus.enabled=true

# Exportar métricas para Prometheus
management.prometheus.metrics.export.enabled=true

# Tag útil para diferenciar métricas de cada microservicio en Grafana
management.metrics.tags.application=${spring.application.name}

# (opcional) Mostrar detalles de health
management.endpoint.health.show-details=always

# (en cada servicio)
management.server.port=8089
management.server.address=127.0.0.1


