package com.imperialnet.user_service.application.usecase;

import com.imperialnet.user_service.application.dto.ChangePasswordRequest;
import com.imperialnet.user_service.application.port.out.KeycloakUserPort;
import com.imperialnet.user_service.application.port.out.UserRepositoryPort;
import com.imperialnet.user_service.domain.model.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class) // 1Ô∏è‚É£ Habilita soporte de Mockito en JUnit 5
class ChangePasswordServiceTest {

    @Mock
    private UserRepositoryPort userRepositoryPort; // 2Ô∏è‚É£ Mock para el repositorio (DB local)

    @Mock
    private KeycloakUserPort keycloakUserPort; // 3Ô∏è‚É£ Mock para la integraci√≥n con Keycloak

    @InjectMocks
    private ChangePasswordService changePasswordService; // 4Ô∏è‚É£ Inyecta los mocks dentro del servicio real

    private User existingUser; // 5Ô∏è‚É£ Usuario de ejemplo existente en DB
    private ChangePasswordRequest request; // 6Ô∏è‚É£ Petici√≥n de cambio de contrase√±a

    @BeforeEach
    void setUp() {
        // 7Ô∏è‚É£ Construyo un usuario v√°lido que simula estar en DB
        existingUser = User.builder()
                .id(1L)
                .keycloakId("kc-123")
                .username("jdoe")
                .firstName("John")
                .lastName("Doe")
                .email("john.doe@example.com")
                .phone("123456789")
                .status("ACTIVE")
                .build();

        // 8Ô∏è‚É£ Construyo una petici√≥n de cambio de contrase√±a v√°lida
        request = new ChangePasswordRequest("NewSecurePassword123!");
    }

    @Test
    void givenNonExistingUser_whenChangePassword_thenThrowRuntimeException() {
        // 9Ô∏è‚É£ Configuro el mock: al buscar por id=99 no encuentra usuario
        when(userRepositoryPort.findById(99L)).thenReturn(Optional.empty());

        // üîü Ejecuto el m√©todo y espero que lance RuntimeException
        assertThrows(RuntimeException.class,
                () -> changePasswordService.changePassword(99L, request));

        // 1Ô∏è‚É£1Ô∏è‚É£ Verifico que se llam√≥ a findById
        verify(userRepositoryPort).findById(99L);

        // 1Ô∏è‚É£2Ô∏è‚É£ Verifico que NO se llam√≥ a Keycloak (porque el usuario no existe)
        verifyNoInteractions(keycloakUserPort);
    }

    @Test
    void givenExistingUser_whenChangePassword_thenInvokeKeycloak() {
        // 1Ô∏è‚É£3Ô∏è‚É£ Configuro el mock: al buscar por id=1 devuelve existingUser
        when(userRepositoryPort.findById(1L)).thenReturn(Optional.of(existingUser));

        // 1Ô∏è‚É£4Ô∏è‚É£ Ejecuto el m√©todo con usuario v√°lido y request v√°lido
        changePasswordService.changePassword(1L, request);

        // 1Ô∏è‚É£5Ô∏è‚É£ Verifico que se llam√≥ a findById con id=1
        verify(userRepositoryPort).findById(1L);

        // 1Ô∏è‚É£6Ô∏è‚É£ Verifico que se llam√≥ a Keycloak con el id y la nueva contrase√±a
        verify(keycloakUserPort).updatePassword("kc-123", "NewSecurePassword123!");
    }
}
